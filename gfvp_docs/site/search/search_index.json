{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to GFVP Technical Docs \u00b6 About Project Technologies \u00b6 It is a Python-Djang 's project. Using Bootstrap5 based Volt template partially. HTMX JS library implemented for interactivity. MySql as database. Project running on the VPS. requirements.txt explaining the package requirements to run the project. Business Logic and Developper \u00b6 Business logic and design idea provided by Krishna Hara Chakrabarti Sole developer Haradhan Sharma Remarkable Library that used \u00b6 Reportlab to create Dynamic PDF and PDF merging. chartist.js to create chart. aos.js for animation. using form CDN. pandas to create series. ckeditor for text editing. xhtmlToPDF to create PDF initially. requests to call youtube API . django-cron2 to manage schedule task. Custom Python Algorithm . ThreadPool used somewhere to speedup. Necessary Information \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Heading level 1 \u00b6 Heading level 1 \u00b6 Heading level 1 \u00b6 Heading level 1 \u00b6 Heading level 1 \u00b6 Heading level 1 \u00b6 I just love bold text . I just love bold text . Love is bold Dorothy followed her through many of the beautiful rooms in her castle. Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. The quarterly results look great! \u00b6 Revenue was off the chart. Profits were higher than ever. Everything is going according to plan . First item Second item Third item Indented item Indented item Fourth item First item Second item Third item Indented item Indented item Fourth item This is the first list item. Here's the second list item. I need to add another paragraph below the second list item. And here's the third list item. This is the first list item. Here's the second list item. A blockquote would look great below the second list item. And here's the third list item. At the command prompt, type nano . Use `code` in your Markdown file. My favorite search engine is Duck Duck Go . My favorite search engine is Duck Duck Go . I love supporting the EFF . This is the Markdown Guide . See the section on code . Syntax Description Test Text Header Title Here's this Paragraph Text And more { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } http://www.example.com http://www.example.com This word is bold. This word is italic.","title":"Home"},{"location":"index.html#welcome_to_gfvp_technical_docs","text":"","title":"Welcome to GFVP Technical Docs"},{"location":"index.html#about_project_technologies","text":"It is a Python-Djang 's project. Using Bootstrap5 based Volt template partially. HTMX JS library implemented for interactivity. MySql as database. Project running on the VPS. requirements.txt explaining the package requirements to run the project.","title":"About Project Technologies"},{"location":"index.html#business_logic_and_developper","text":"Business logic and design idea provided by Krishna Hara Chakrabarti Sole developer Haradhan Sharma","title":"Business Logic and Developper"},{"location":"index.html#remarkable_library_that_used","text":"Reportlab to create Dynamic PDF and PDF merging. chartist.js to create chart. aos.js for animation. using form CDN. pandas to create series. ckeditor for text editing. xhtmlToPDF to create PDF initially. requests to call youtube API . django-cron2 to manage schedule task. Custom Python Algorithm . ThreadPool used somewhere to speedup.","title":"Remarkable Library that used"},{"location":"index.html#necessary_information","text":"For full documentation visit mkdocs.org .","title":"Necessary Information"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project_layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"index.html#heading_level_1","text":"","title":"Heading level 1"},{"location":"index.html#heading_level_2","text":"","title":"Heading level 1"},{"location":"index.html#heading_level_3","text":"","title":"Heading level 1"},{"location":"index.html#heading_level_4","text":"","title":"Heading level 1"},{"location":"index.html#heading_level_5","text":"","title":"Heading level 1"},{"location":"index.html#heading_level_6","text":"I just love bold text . I just love bold text . Love is bold Dorothy followed her through many of the beautiful rooms in her castle. Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.","title":"Heading level 1"},{"location":"index.html#the_quarterly_results_look_great","text":"Revenue was off the chart. Profits were higher than ever. Everything is going according to plan . First item Second item Third item Indented item Indented item Fourth item First item Second item Third item Indented item Indented item Fourth item This is the first list item. Here's the second list item. I need to add another paragraph below the second list item. And here's the third list item. This is the first list item. Here's the second list item. A blockquote would look great below the second list item. And here's the third list item. At the command prompt, type nano . Use `code` in your Markdown file. My favorite search engine is Duck Duck Go . My favorite search engine is Duck Duck Go . I love supporting the EFF . This is the Markdown Guide . See the section on code . Syntax Description Test Text Header Title Here's this Paragraph Text And more { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } http://www.example.com http://www.example.com This word is bold. This word is italic.","title":"The quarterly results look great!"},{"location":"accounts.html","text":"This is the first paragraph of the document. First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Fenced code blocks are like Standard Markdown\u2019s regular code blocks, except that they\u2019re not indented and instead rely on start and end fence lines to delimit the code block. def fn(): pass Fruit(left) Emoji(center) Taste(right) Mango is the king of Fruits :mango: Sweet, and I love it Lemon is good for health :lemon: Sour, mix it in the water","title":"Accounts"},{"location":"blog.html","text":"","title":"Blog"},{"location":"crm.html","text":"","title":"CRM"},{"location":"evaluation.html","text":"Welcome to The evaluation DOCS \u00b6 Apps layout \u00b6 Web Root # The main folder of the web project. evaluation/ templatestags #Written django's custom template tag to serve in the template admin.py apps.py forms.py helper.py middleware # Custom Django's midleware models.py nreport_class.py # Custom algorthm to build traffic-light overview signals.py tests.py urls.py views.py ... Custom template Tags \u00b6 {% load custom_tags %} - To load Custom template tags in the HTML file {{ question.sort_order | brek_after_two}} - To break line after first two word of the questions's sort order. It is not used now. get_verbose_name(instance, field_name) - It is using to build quotation report in function base view. It takes model instance and field name as parameter and return the verbose name of the field. It can be used in the template as well acroding tot he django's document. in_quot(quote, user) - This tag returns the quotations created by the user as service provider. Example use case: {% if child.get_quotations|in_quot:user %} to get all quotation of the user. Evaluation Admin \u00b6 Every class and features in the admin.py based on django's regular facility. Some exceptional in our case are mentoning here: class Media: css = { 'all': ( '/static/css/fancy.css', ) } Adding custom css using above code in admin class change_list_template = 'admin/question_list.html' def changelist_view(self, request, extra_context=None): questions = Question.objects.filter(is_active = True) label_pending_in_question = [q.sort_order for q in questions if not q.have_4labels] problem_in_options = [q.sort_order for q in questions if not q.problem_in_option] extra_context = extra_context or {} extra_context['label_pending_in_question'] = label_pending_in_question extra_context['problem_in_options'] = problem_in_options return super().changelist_view(request, extra_context=extra_context) Adding error note using above by oerriding instance and method in the admin class of question. @admin.action(description='Genarate updated report and notify to the creator') def check_and_notify(self, request, queryset): from .views import set_evastatment, set_evastatement_of_logical_string ........ ......... ReportMailQueue.objects.create( to = i.email, from_report = i, new_report = copy_evaluator, ) Above method are adding action in Evaluator(Evaluator is the alternative coding name of human readable Report). The action should be called by admin on \"Pening\" marked report. Pending mark also a custom adition in admin interface which is described in the models.py in this documentation. Each call in above method create mail queue to send mail on next cronjob execution. class NextActivitiesAdmin(admin.ModelAdmin): @admin.action(description='Duplicate Selected Activities') def duplicate_event(modeladmin, request, queryset): for object in queryset: .......... actions = [duplicate_event] admin.site.register(NextActivities, NextActivitiesAdmin) Above aditional method in class creating a additional action to clone the selected objects in the NextActivities model in the admin side. APP \u00b6 App is a configuration file of evaluation app provided by Django. Here signals.py has been registered using below code. def ready(self): import evaluation.signals Do not change anything in this file. Form \u00b6 forms.py inheriting the default django's ModelForm class for evaluation initialization based on our CSS library. We are using bootstrap 5 . Implemented HTMX to find out fuel grade based on selected biofuel. Helper \u00b6 Helper playing a vast role in the evaluation application def active_sessions(): ''' we will collect all active session's evaluator id of before past 24 hours it returns list ''' return list(s_evs) The above active_session function collect all active sessions before 24 hours and it is calling through cronjob inside below function. def clear_evaluator(): ''' IT IS RUNNING BY CRON JOB we will remove all wastage report which just initialized but have no data and which is not qualified to show in the profile page. It returns total deleted report in a call. It is created to call by CRONJOB but can be called from anywhere. ''' return total_deleted The clear_evaluator works as per code cooments mentioned inside the function. from evaluation.helper import get_current_evaluator provide the current evaluator objects to use in anywhere. It taks one parameter is request . needless to say that evaluator is result of evaluation process, which can be called as report as well. It is a bit confusing. But after developing basement and database here some diferent types of advise so that I had to adjust. In this planform have some manymore like that. But will be explained. label_assesment_for_donot_know , label_assesment_for_positive , overall_assesment_for_donot_know , overall_assesment_for_positive These methods commit some assesments indivisually for answere type in the evalautor as statement. All these like manual assesment and never using anywhere other then report genaration so that no DRF thingking were here. The functions can be wrapped into the class and can be optimized as well, but as we are under development stage and many more to develop yet so it will be later. Some of method called inside these methods can be called from LabelWiseData class below as well. from evaluation.helper import OilComparision 's packed_labels returns pandas dataframe of Related Fuel grade. picked_labels_dict return the dictionery of labels. Here have many other methods to use. The class takes compulsary parameter named oil . The dataframe currently using in the chartistjs to show in the evaluation form and t use in further advise. from evaluation.helper import LabelWiseData 's packed_labels return pandas dataframe of biofuel and label_data_history returns the dataframe of the history of biofuel reports in various stage. picked_labels_dict return the dictionery of labels. Here have many more methods to use. The class takes compulsary parameter named evaluator . nreport_context function of helper is returning the context for HTML evaluation report. It takes request and slug parameter as compulsary. The function directly call from the view function of the HTML report.","title":"Evaluation"},{"location":"evaluation.html#welcome_to_the_evaluation_docs","text":"","title":"Welcome to The evaluation DOCS"},{"location":"evaluation.html#apps_layout","text":"Web Root # The main folder of the web project. evaluation/ templatestags #Written django's custom template tag to serve in the template admin.py apps.py forms.py helper.py middleware # Custom Django's midleware models.py nreport_class.py # Custom algorthm to build traffic-light overview signals.py tests.py urls.py views.py ...","title":"Apps layout"},{"location":"evaluation.html#custom_template_tags","text":"{% load custom_tags %} - To load Custom template tags in the HTML file {{ question.sort_order | brek_after_two}} - To break line after first two word of the questions's sort order. It is not used now. get_verbose_name(instance, field_name) - It is using to build quotation report in function base view. It takes model instance and field name as parameter and return the verbose name of the field. It can be used in the template as well acroding tot he django's document. in_quot(quote, user) - This tag returns the quotations created by the user as service provider. Example use case: {% if child.get_quotations|in_quot:user %} to get all quotation of the user.","title":"Custom template Tags"},{"location":"evaluation.html#evaluation_admin","text":"Every class and features in the admin.py based on django's regular facility. Some exceptional in our case are mentoning here: class Media: css = { 'all': ( '/static/css/fancy.css', ) } Adding custom css using above code in admin class change_list_template = 'admin/question_list.html' def changelist_view(self, request, extra_context=None): questions = Question.objects.filter(is_active = True) label_pending_in_question = [q.sort_order for q in questions if not q.have_4labels] problem_in_options = [q.sort_order for q in questions if not q.problem_in_option] extra_context = extra_context or {} extra_context['label_pending_in_question'] = label_pending_in_question extra_context['problem_in_options'] = problem_in_options return super().changelist_view(request, extra_context=extra_context) Adding error note using above by oerriding instance and method in the admin class of question. @admin.action(description='Genarate updated report and notify to the creator') def check_and_notify(self, request, queryset): from .views import set_evastatment, set_evastatement_of_logical_string ........ ......... ReportMailQueue.objects.create( to = i.email, from_report = i, new_report = copy_evaluator, ) Above method are adding action in Evaluator(Evaluator is the alternative coding name of human readable Report). The action should be called by admin on \"Pening\" marked report. Pending mark also a custom adition in admin interface which is described in the models.py in this documentation. Each call in above method create mail queue to send mail on next cronjob execution. class NextActivitiesAdmin(admin.ModelAdmin): @admin.action(description='Duplicate Selected Activities') def duplicate_event(modeladmin, request, queryset): for object in queryset: .......... actions = [duplicate_event] admin.site.register(NextActivities, NextActivitiesAdmin) Above aditional method in class creating a additional action to clone the selected objects in the NextActivities model in the admin side.","title":"Evaluation Admin"},{"location":"evaluation.html#app","text":"App is a configuration file of evaluation app provided by Django. Here signals.py has been registered using below code. def ready(self): import evaluation.signals Do not change anything in this file.","title":"APP"},{"location":"evaluation.html#form","text":"forms.py inheriting the default django's ModelForm class for evaluation initialization based on our CSS library. We are using bootstrap 5 . Implemented HTMX to find out fuel grade based on selected biofuel.","title":"Form"},{"location":"evaluation.html#helper","text":"Helper playing a vast role in the evaluation application def active_sessions(): ''' we will collect all active session's evaluator id of before past 24 hours it returns list ''' return list(s_evs) The above active_session function collect all active sessions before 24 hours and it is calling through cronjob inside below function. def clear_evaluator(): ''' IT IS RUNNING BY CRON JOB we will remove all wastage report which just initialized but have no data and which is not qualified to show in the profile page. It returns total deleted report in a call. It is created to call by CRONJOB but can be called from anywhere. ''' return total_deleted The clear_evaluator works as per code cooments mentioned inside the function. from evaluation.helper import get_current_evaluator provide the current evaluator objects to use in anywhere. It taks one parameter is request . needless to say that evaluator is result of evaluation process, which can be called as report as well. It is a bit confusing. But after developing basement and database here some diferent types of advise so that I had to adjust. In this planform have some manymore like that. But will be explained. label_assesment_for_donot_know , label_assesment_for_positive , overall_assesment_for_donot_know , overall_assesment_for_positive These methods commit some assesments indivisually for answere type in the evalautor as statement. All these like manual assesment and never using anywhere other then report genaration so that no DRF thingking were here. The functions can be wrapped into the class and can be optimized as well, but as we are under development stage and many more to develop yet so it will be later. Some of method called inside these methods can be called from LabelWiseData class below as well. from evaluation.helper import OilComparision 's packed_labels returns pandas dataframe of Related Fuel grade. picked_labels_dict return the dictionery of labels. Here have many other methods to use. The class takes compulsary parameter named oil . The dataframe currently using in the chartistjs to show in the evaluation form and t use in further advise. from evaluation.helper import LabelWiseData 's packed_labels return pandas dataframe of biofuel and label_data_history returns the dataframe of the history of biofuel reports in various stage. picked_labels_dict return the dictionery of labels. Here have many more methods to use. The class takes compulsary parameter named evaluator . nreport_context function of helper is returning the context for HTML evaluation report. It takes request and slug parameter as compulsary. The function directly call from the view function of the HTML report.","title":"Helper"},{"location":"guide.html","text":"","title":"Guide"}]}